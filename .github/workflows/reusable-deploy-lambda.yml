name: Reusable workflow Lambda Deploy

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      s3:
        required: true
        type: string
      repository:
        required: true
        type: string
      repository_name:
        required: true
        type: string
      version:
        required: true
        type: string
      language:
        default: 'go'
        type: string
      version_language:
        default: 'stable'
        type: string
    secrets:
      account_id:
        required: true
      region:
        required: true
      role:
        required: true

jobs:
  execute-test-go:
    if: inputs.language == 'go'
    uses: ./.github/workflows/reusable-test-go.yml
    with:
      version_language: ${{ inputs.version_language }}

  execute-docker:
    name: Build and publish docker container
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: execute-test-go
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-session-name: deploy_infra
          aws-region: ${{ secrets.region }}
          role-to-assume: arn:aws:iam::${{ secrets.account_id }}:role/${{ secrets.role }}
      - name: Login AWS ECR with Docker
        run: |
          aws ecr get-login-password --region ${{ secrets.region }} | docker login --username AWS --password-stdin ${{ secrets.account_id }}.dkr.ecr.${{ secrets.region }}.amazonaws.com
      - name: Compiler image from docker
        run: |
          docker build -t ${{ secrets.account_id }}.dkr.ecr.${{ secrets.region }}.amazonaws.com/${{ inputs.repository_name }}:${{ inputs.version }} -f ./Dockerfile ./
          docker push ${{ secrets.account_id }}.dkr.ecr.${{ secrets.region }}.amazonaws.com/${{ inputs.repository_name }}:${{ inputs.version }}
  
  execute-terraform:
    name: Deploy Terraform
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: execute-docker
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
      - name: Terraform Init
        uses: hashicorp/setup-terraform@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-session-name: deploy_infra
          aws-region: ${{ secrets.region }}
          role-to-assume: arn:aws:iam::${{ secrets.account_id }}:role/${{ secrets.role }}
      - name: Get tfstate
        continue-on-error: true
        run: |
          aws s3 cp s3://${{ inputs.s3 }}/${{ inputs.repository }}/terraform.tfstate ./terraform.tfstate
      - name: Terraform Init
        run: terraform init
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Plan
        env:
          TF_VAR_RepoName: ${{ inputs.repository_name }}
          TF_VAR_DeployVersion: ${{ inputs.version }}
        run: terraform plan -var-file=stage/dev/terraform.tfvars -out=infra.out
      - name: Terraform Apply
        id: terraform_apply
        env:
          TF_VAR_RepoName: ${{ inputs.repository }}
          TF_VAR_DeployVersion: ${{ inputs.version }}
        run: terraform apply "infra.out"
        continue-on-error: true
      - name: Send tfstate to s3
        run: |
          aws s3 cp ./terraform.tfstate s3://${{ inputs.s3 }}/${{ inputs.repository }}/
      - name: Check on failures
        if: steps.terraform_apply.outcome != 'success'
        run: exit 1